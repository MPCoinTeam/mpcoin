// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: balances.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getBalancesByUserId = `-- name: GetBalancesByUserId :many
SELECT 
    b.balance,
    t.id, t.chain_id, t.contract_address, t.name, t.symbol, t.decimals, t.created_at, t.updated_at
FROM 
    balances b
JOIN 
    wallets w ON b.wallet_id = w.id
JOIN 
    tokens t ON b.token_id = t.id
JOIN 
    users u ON w.user_id = u.id
WHERE 
    u.id = $1
`

type GetBalancesByUserIdRow struct {
	Balance         pgtype.Numeric
	ID              pgtype.UUID
	ChainID         pgtype.UUID
	ContractAddress string
	Name            string
	Symbol          string
	Decimals        int32
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

func (q *Queries) GetBalancesByUserId(ctx context.Context, id pgtype.UUID) ([]GetBalancesByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getBalancesByUserId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBalancesByUserIdRow
	for rows.Next() {
		var i GetBalancesByUserIdRow
		if err := rows.Scan(
			&i.Balance,
			&i.ID,
			&i.ChainID,
			&i.ContractAddress,
			&i.Name,
			&i.Symbol,
			&i.Decimals,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBalance = `-- name: UpdateBalance :one
UPDATE balances
SET balance = $1
FROM wallets
WHERE balances.wallet_id = wallets.id
  AND wallets.address = $2 
  AND balances.token_id = $3
RETURNING wallets.id, user_id, address, encrypted_private_key, created_at, wallets.updated_at, balances.id, wallet_id, chain_id, token_id, balance, balances.updated_at
`

type UpdateBalanceParams struct {
	Balance pgtype.Numeric
	Address string
	TokenID pgtype.UUID
}

type UpdateBalanceRow struct {
	ID                  pgtype.UUID
	UserID              pgtype.UUID
	Address             string
	EncryptedPrivateKey []byte
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	ID_2                pgtype.UUID
	WalletID            pgtype.UUID
	ChainID             pgtype.UUID
	TokenID             pgtype.UUID
	Balance             pgtype.Numeric
	UpdatedAt_2         pgtype.Timestamptz
}

func (q *Queries) UpdateBalance(ctx context.Context, arg UpdateBalanceParams) (UpdateBalanceRow, error) {
	row := q.db.QueryRow(ctx, updateBalance, arg.Balance, arg.Address, arg.TokenID)
	var i UpdateBalanceRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.WalletID,
		&i.ChainID,
		&i.TokenID,
		&i.Balance,
		&i.UpdatedAt_2,
	)
	return i, err
}
