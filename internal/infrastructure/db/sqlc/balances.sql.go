// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: balances.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getBalancesByUserId = `-- name: GetBalancesByUserId :many
SELECT 
    b.balance,
    t.id, t.chain_id, t.contract_address, t.name, t.symbol, t.decimals, t.created_at, t.updated_at
FROM 
    balances b
JOIN 
    wallets w ON b.wallet_id = w.id
JOIN 
    tokens t ON b.token_id = t.id
JOIN 
    users u ON w.user_id = u.id
WHERE 
    u.id = $1
`

type GetBalancesByUserIdRow struct {
	Balance         pgtype.Numeric
	ID              pgtype.UUID
	ChainID         pgtype.UUID
	ContractAddress string
	Name            string
	Symbol          string
	Decimals        int32
	CreatedAt       pgtype.Timestamptz
	UpdatedAt       pgtype.Timestamptz
}

func (q *Queries) GetBalancesByUserId(ctx context.Context, id pgtype.UUID) ([]GetBalancesByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getBalancesByUserId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBalancesByUserIdRow
	for rows.Next() {
		var i GetBalancesByUserIdRow
		if err := rows.Scan(
			&i.Balance,
			&i.ID,
			&i.ChainID,
			&i.ContractAddress,
			&i.Name,
			&i.Symbol,
			&i.Decimals,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
