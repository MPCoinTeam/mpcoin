// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: balances.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getBalancesByWalletId = `-- name: GetBalancesByWalletId :many
SELECT 
    b.balance,
    t.id AS token_id,
    t.name AS token_name,
    t.symbol AS token_symbol,
    t.decimals,
    b.updated_at
FROM 
    balances b
JOIN 
    tokens t ON b.token_id = t.id
WHERE 
    b.wallet_id = $1
`

type GetBalancesByWalletIdRow struct {
	Balance     pgtype.Numeric
	TokenID     pgtype.UUID
	TokenName   string
	TokenSymbol string
	Decimals    int32
	UpdatedAt   pgtype.Timestamptz
}

func (q *Queries) GetBalancesByWalletId(ctx context.Context, walletID pgtype.UUID) ([]GetBalancesByWalletIdRow, error) {
	rows, err := q.db.Query(ctx, getBalancesByWalletId, walletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBalancesByWalletIdRow
	for rows.Next() {
		var i GetBalancesByWalletIdRow
		if err := rows.Scan(
			&i.Balance,
			&i.TokenID,
			&i.TokenName,
			&i.TokenSymbol,
			&i.Decimals,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
