// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (id, wallet_id , chain_id, from_address, to_address, amount, token_id, gas_price, gas_limit, nonce, status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, wallet_id, chain_id, from_address, to_address, amount, token_id, gas_price, gas_limit, nonce, status, tx_hash, created_at, updated_at
`

type CreateTransactionParams struct {
	ID          pgtype.UUID
	WalletID    pgtype.UUID
	ChainID     pgtype.UUID
	FromAddress string
	ToAddress   string
	Amount      string
	TokenID     pgtype.UUID
	GasPrice    pgtype.Numeric
	GasLimit    pgtype.Int8
	Nonce       pgtype.Int8
	Status      string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.WalletID,
		arg.ChainID,
		arg.FromAddress,
		arg.ToAddress,
		arg.Amount,
		arg.TokenID,
		arg.GasPrice,
		arg.GasLimit,
		arg.Nonce,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.ChainID,
		&i.FromAddress,
		&i.ToAddress,
		&i.Amount,
		&i.TokenID,
		&i.GasPrice,
		&i.GasLimit,
		&i.Nonce,
		&i.Status,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, wallet_id, chain_id, from_address, to_address, amount, token_id, gas_price, gas_limit, nonce, status, tx_hash, created_at, updated_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id pgtype.UUID) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.ChainID,
		&i.FromAddress,
		&i.ToAddress,
		&i.Amount,
		&i.TokenID,
		&i.GasPrice,
		&i.GasLimit,
		&i.Nonce,
		&i.Status,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionsByWalletID = `-- name: GetTransactionsByWalletID :many
SELECT id, wallet_id, chain_id, from_address, to_address, amount, token_id, gas_price, gas_limit, nonce, status, tx_hash, created_at, updated_at FROM transactions
WHERE wallet_id = $1
`

func (q *Queries) GetTransactionsByWalletID(ctx context.Context, walletID pgtype.UUID) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByWalletID, walletID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.WalletID,
			&i.ChainID,
			&i.FromAddress,
			&i.ToAddress,
			&i.Amount,
			&i.TokenID,
			&i.GasPrice,
			&i.GasLimit,
			&i.Nonce,
			&i.Status,
			&i.TxHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions 
SET (status, tx_hash) = ($2, $3)
WHERE id = $1
RETURNING id, wallet_id, chain_id, from_address, to_address, amount, token_id, gas_price, gas_limit, nonce, status, tx_hash, created_at, updated_at
`

type UpdateTransactionParams struct {
	ID     pgtype.UUID
	Status string
	TxHash pgtype.Text
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction, arg.ID, arg.Status, arg.TxHash)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.ChainID,
		&i.FromAddress,
		&i.ToAddress,
		&i.Amount,
		&i.TokenID,
		&i.GasPrice,
		&i.GasLimit,
		&i.Nonce,
		&i.Status,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
