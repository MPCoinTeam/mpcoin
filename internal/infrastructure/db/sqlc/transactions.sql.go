// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (from_wallet_id, to_wallet_id, amount, status)
VALUES ($1, $2, $3, $4)
RETURNING id, from_wallet_id, to_wallet_id, amount, status, created_at, updated_at
`

type CreateTransactionParams struct {
	FromWalletID int32
	ToWalletID   int32
	Amount       pgtype.Numeric
	Status       string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.FromWalletID,
		arg.ToWalletID,
		arg.Amount,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromWalletID,
		&i.ToWalletID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, from_wallet_id, to_wallet_id, amount, status, created_at, updated_at FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromWalletID,
		&i.ToWalletID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :one
UPDATE transactions
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, from_wallet_id, to_wallet_id, amount, status, created_at, updated_at
`

type UpdateTransactionStatusParams struct {
	ID     int32
	Status string
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransactionStatus, arg.ID, arg.Status)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromWalletID,
		&i.ToWalletID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
