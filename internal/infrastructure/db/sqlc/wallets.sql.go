// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wallets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (user_id, address, public_key, encrypted_private_key)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, address, public_key, encrypted_private_key, balance, created_at, updated_at
`

type CreateWalletParams struct {
	UserID              int32
	Address             string
	PublicKey           string
	EncryptedPrivateKey string
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet,
		arg.UserID,
		arg.Address,
		arg.PublicKey,
		arg.EncryptedPrivateKey,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.PublicKey,
		&i.EncryptedPrivateKey,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT id, user_id, address, public_key, encrypted_private_key, balance, created_at, updated_at FROM wallets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id int32) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWallet, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.PublicKey,
		&i.EncryptedPrivateKey,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWalletBalance = `-- name: UpdateWalletBalance :one
UPDATE wallets
SET balance = balance + $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, address, public_key, encrypted_private_key, balance, created_at, updated_at
`

type UpdateWalletBalanceParams struct {
	ID      int32
	Balance pgtype.Numeric
}

func (q *Queries) UpdateWalletBalance(ctx context.Context, arg UpdateWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWalletBalance, arg.ID, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.PublicKey,
		&i.EncryptedPrivateKey,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
