// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wallets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (user_id, address, encrypted_private_key)
VALUES ($1, $2, $3)
RETURNING id, user_id, address, encrypted_private_key, created_at, updated_at
`

type CreateWalletParams struct {
	UserID              pgtype.UUID
	Address             string
	EncryptedPrivateKey []byte
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet, arg.UserID, arg.Address, arg.EncryptedPrivateKey)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT id, user_id, address, encrypted_private_key, created_at, updated_at FROM wallets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id pgtype.UUID) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWallet, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletByAddress = `-- name: GetWalletByAddress :one
SELECT id, user_id, address, encrypted_private_key, created_at, updated_at FROM wallets
WHERE address = $1 LIMIT 1
`

func (q *Queries) GetWalletByAddress(ctx context.Context, address string) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByAddress, address)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletByUserID = `-- name: GetWalletByUserID :one
SELECT id, user_id, address, encrypted_private_key, created_at, updated_at FROM wallets
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetWalletByUserID(ctx context.Context, userID pgtype.UUID) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByUserID, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.EncryptedPrivateKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWallets = `-- name: GetWallets :many
SELECT id, user_id, address, encrypted_private_key, created_at, updated_at FROM wallets
`

func (q *Queries) GetWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.EncryptedPrivateKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
