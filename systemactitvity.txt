1. signup -> createWallet --> publish walletCreated message

2. get balances of user (login -> home)
    frontend pass access_token
    backend get balance base on user_id in access_token
    backend return list of {token, balance}
    backend return data: list {token, balance}

3. get user transactions on specific token/chain (user click token)
    frontend pass access_token and tokenId/chainId
    backend get chainId base on tokenId (store map in buffer for performace enhance)
    backend get transactions base on user_id and tokenId.
    backend return data: list {transaction}

4. synchornize data from blockchain
    foreach chain in database,
    syncApp listening to newWalletCreated event from kafka --> update the wallet addresses in buffer
    syncApp listening to newHeadBlock event 
        --> find transaction relate to user address, publish transaction found message to kafka
        --> find transaction from unknown address to app's user address and persist to db
    syncApp listening to transactionFound event from kafka
        --> getBalance in blockchain and persist to db
    if new chain added, restart sync app.

5. tranfer token
    


6. add chain (admin auth)
    --> add native token, chain
    --> add balances for all user